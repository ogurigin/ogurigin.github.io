<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[es6编译环境搭建]]></title>
    <url>%2F2017%2F08%2F11%2Fes6-environment%2F</url>
    <content type="text"><![CDATA[es6编译环境搭建首先建立一个文件夹放置代码，并在文件夹下建立dist和src文件夹，再建立一个index.html。 然后先初始化1npm init -y 然后在根目录下就会多出一个package.json的文件，一般不需要修改，要修改的话打开修改一下就好了 全局安装babel关于babel：就是一个可以将es6转成大部分浏览器可以识别的es5的格式的转码器 1npm install -g babel-cli 等待安装完成就好了 安装 es2015转码1npm install --save-dev babel-preset-es2015 babel-cli 这样就可以了 ，当然还有其他的转码规则有需要的可以安装 配置文件.babelrc在根目录下新建一个.babelrc文件，写入 123456&#123; &quot;presets&quot; :[ &quot;es2015&quot; ], &quot;plugins&quot;:[]&#125; 保存就可以了。 这样环境基本就搭建好了。 测试可以在src中新建一个index.js，写入 12let t =&apos;Hello World&apos;;console.log(t); 然后在之前的index.html中引入index.js 需要注意的是 引入的时候路径是dist的路径，不要引入src的 1&lt;script src=&quot;./dist/index.js&quot;&gt;&lt;/script&gt; 执行 1babel src/index.js -o dist/index.js 这样，在dist下面就会多一个index.js文件，然后是es5的代码规范。]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue 服务器部署]]></title>
    <url>%2F2017%2F07%2F31%2Fvue-server-deployt%2F</url>
    <content type="text"><![CDATA[一般来说 打包的文件是不会放在服务器的根目录下的，而通过vue-cli开发,打包后默认的引用路径是使用根目录。这个时候就需要修改webpack的配置文件 修改webpack配置文件在根目录下找到config文件夹下的index.js例如 你在服务器上的目录如下123-demo -static -index.html 则在index.js中的 1assetsPublicPath: '/', 改为 1assetsPublicPath: './', 或者改为 1assetsPublicPath: '/demo/', 即可，这样可保证build后资源的引用路径正确 打包发布1$ npm run build 将生成的dist文件夹下的内容上传至服务器的demo文件下即可]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo上传Github过程中遇到的坑]]></title>
    <url>%2F2017%2F07%2F31%2Fhexo-to-github%2F</url>
    <content type="text"><![CDATA[只记录自己操作过程中遇到的各种坑，以及自己的解决方式。你万一解决不了，那我不怪我== CMD上传问题使用cmd上传的时候出现如下提示1234567891011INFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...'git' �����ڲ����ⲿ���Ҳ���ǿ����еĳ����������ļ�FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: spawn git ENOENT ...FATAL spawn git ENOENTError: spawn git ENOENT ... 解决方案123456789改用 git bash上传，在blog根目录右键打开git bush即可&#123;% endnote %&#125;### git bush上传问题使用cmd上传的时候出现如下提示&#123;% note default %&#125; /.../hexo: line 12: node: command not found 解决方案12这种一般都是环境变量配置的问题，正确配置环境变量即可当然 你要是node都没有安装，那就没办法了 github不更新问题1提示上次成功 但是github没有更新 解决方案1234只要 在 hexo d -g 之前先执行hexo clean 就好了如果还是不行，可以把根目录下的public文件删除后再执行hexo d -g]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[填写form数据和从form中获取数据]]></title>
    <url>%2F2017%2F07%2F31%2Fform-operate%2F</url>
    <content type="text"><![CDATA[当页面有大量的input,初始化的时候需要从服务器获取数据，并填入表单的时候， 一个个去val()操作的话就会很傻逼了，稍微记录下这次项目自己写的两个函数 填写表单数据 obj为你所在填写的input所在父元素， eg:你需要填写的父元素都在一个id为all-form的div下，则obj传$(‘#all-form’) jsonValue为从后台获取的数据 其中这次的选项框都为单选框，有复选框的请自己添加循环即可 1234567891011121314function setFormValue(obj,jsonValue)&#123; for(var key in jsonValue)&#123; var $oinput = obj.find(&quot;[name=&quot; + key + &quot;]&quot;); if ($oinput.attr(&quot;type&quot;) == &quot;radio&quot; || $oinput.attr(&quot;type&quot;) == &quot;checkbox&quot;) &#123; $oinput.each(function() &#123; if ($(this).val() == jsonValue[key])&#123; $(this).prop(&quot;checked&quot;, true).change(); &#125; &#125;) &#125; else &#123; $oinput.val(jsonValue[key]); &#125; &#125;&#125; 获取表单数据 obj与上述一致 jsonInfo为你所需要传给后台的数据名称 其中这次的选项框都为单选框，有复选框的请自己添加循环即可 1234567891011121314151617181920function getFormValue(obj)&#123; jsonInfo = &#123; &quot;a&quot;: &quot;&quot;, &quot;b&quot;: &quot;&quot;, &quot;c&quot;: &quot;&quot;, &#125; for(var key in jsonInfo) &#123; var $oinput = obj.find(&quot;[name=&quot; + key + &quot;]&quot;); if ($oinput.attr(&quot;type&quot;) === &quot;radio&quot; || $oinput.attr(&quot;type&quot;) === &quot;checkbox&quot;) &#123; $oinput.each(function() &#123; if ($(this).prop(&apos;checked&apos;))&#123; jsonInfo[key] = $(this).val(); &#125; &#125;) &#125; else &#123; jsonInfo[key] = $oinput.val(); &#125; &#125; return jsonInfo;&#125;]]></content>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery分页代码]]></title>
    <url>%2F2017%2F07%2F27%2Fjquery-pagination%2F</url>
    <content type="text"><![CDATA[自己要用的，记一下。就是一个基于jquery的分页。 因为自己项目用的是amazeui,所以样式就是amazeui的样式！！！ 分页 obj为你需要放分页的父元素， eg:你需要填写的父元素都在一个id为all-page的div下，则obj传$(‘#all-page’) pageNow为当前显示的页数 pageNum为总的页面数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546var pagination = function (obj,pageNow,pageNum)&#123; var paginations = &apos;&apos;; //上一页 if(pageNow&gt;1)&#123; paginations += &apos;&lt;li id=&quot;last-page&quot;&gt;&lt;a href=&quot;javascript:;&quot;&gt;&amp;laquo;&lt;/a&gt;&lt;/li&gt;&apos; &#125; else &#123; // obj.remove(&apos;.prevPage&apos;); paginations += &apos;&lt;li id=&quot;last-page&quot;&gt;&lt;span &gt;&amp;laquo;&lt;/span&gt;&lt;/li&gt;&apos; &#125; //中间页码 if(pageNow != 1 &amp;&amp; pageNow &gt;= 4 &amp;&amp; pageNum != 4)&#123; paginations += &apos;&lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;tcdNumber&quot;&gt;&apos;+1+&apos;&lt;/a&gt;&lt;/li&gt;&apos; &#125; if(pageNow-2 &gt; 2 &amp;&amp; pageNow &lt;= pageNum &amp;&amp; pageNum &gt; 5)&#123; paginations += &apos;&lt;li&gt;&lt;span&gt;...&lt;/span&gt;&lt;/li&gt;&apos; &#125; var start = pageNow -2,end = pageNow+2; if((start &gt; 1 &amp;&amp; pageNow &lt; 4)||pageNow == 1)&#123; end++; &#125; if(pageNow &gt; pageNum-4 &amp;&amp; pageNow &gt;= pageNum)&#123; start--; &#125; for (;start &lt;= end; start++) &#123; if(start &lt;= pageNum &amp;&amp; start &gt;= 1)&#123; if(start != pageNow)&#123; paginations += &apos;&lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;tcdNumber&quot;&gt;&apos;+ start +&apos;&lt;/a&gt;&lt;/li&gt;&apos; &#125;else&#123; paginations += &apos;&lt;li class=&quot;am-active&quot;&gt;&lt;a&gt;&apos;+ start +&apos;&lt;/a&gt;&lt;/li&gt;&apos; &#125; &#125; &#125; if(pageNow + 2 &lt; pageNum - 1 &amp;&amp; pageNow &gt;= 1 &amp;&amp; pageNum &gt; 5)&#123; paginations += &apos;&lt;li&gt;&lt;span&gt;...&lt;/span&gt;&lt;/li&gt;&apos; &#125; if(pageNow != pageNum &amp;&amp; pageNow &lt; pageNum -2 &amp;&amp; pageNum != 4)&#123; paginations += &apos;&lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;tcdNumber&quot;&gt;&apos;+pageNum+&apos;&lt;/a&gt;&lt;/li&gt;&apos; &#125; //下一页 if(pageNow &lt; pageNum)&#123; paginations += &apos;&lt;li id=&quot;next-page&quot;&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;&amp;raquo;&lt;/a&gt;&lt;/li&gt;&apos; &#125;else&#123; paginations += &apos;&lt;li id=&quot;next-page&quot;&gt;&lt;span&gt;&amp;raquo;&lt;/span&gt;&lt;/li&gt;&apos; &#125; obj.append(paginations);&#125; 页面click绑定 保证跳转的页面对就好了。 1234567891011121314151617$(&apos;.all-page&apos;).on(&apos;click&apos;,&apos;a&apos;,function()&#123; var id = $(this).parent().attr(&apos;id&apos;); num = 0; if(&apos;last-page&apos; === id)&#123; num = parseInt($(&apos;.am-pagination .am-active&apos;).text())-1; if(1 === num)&#123; $(this).attr(&apos;disabled&apos;,true); &#125; // common.goToPage(num); &#125; else if(&apos;next-page&apos; === id)&#123; num = parseInt($(&apos;.am-pagination .am-active&apos;).text())+1; &#125; else &#123; num = $(this).text() &#125; start = num_list * (num-1); toWork() // 你要去执行的函数！！！！&#125;) 这样分页就好了 ，样式我没写进去，自己加就好啦配合amaze的话 大概张这样：]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在vuex的大门口]]></title>
    <url>%2F2017%2F05%2F09%2Fabout-vuex%2F</url>
    <content type="text"><![CDATA[都是我自己的理解，还有我自己的命名习惯。有错误和更好的和我说！ 文件结构1234567-store -index.js -state.js -getter.js -mutation-types.js -mutations.js -actions.js state12//用来放置数据(随便写个数据)flag : true mutation-types12//使用常量替代 mutation 事件类型(可用可不用)export const CHANGE_FLAG = 'CHANGE_FLAG' mutations12345678//改变store状态的唯一方法(不能异步)//因为使用了常量的写法，所以要先引入import &#123; CHANGE_FLAG &#125; from './mutation-types'export default&#123; [SOME_MUTATION](state,_flag) &#123; state.flag = _flag &#125;&#125; actions12345678//用于提交mutation(可以异步操作)import &#123; CHANGE_FLAG &#125; from './mutation-types'export default&#123; changeflag(&#123;commit,state&#125;,obj)&#123; commit(CHANGE_FLAG,obj) &#125;,&#125; index1234567891011121314151617//创建store，一般都是固定的写法import Vue from 'vue';import Vuex from 'vuex';Vue.use(Vuex);import state from './state';import actions from './actions';import mutations from './mutations';import getters from './getters';export default new Vuex.Store(&#123; state, actions, mutations, getters&#125;) 在组件中使用1234567891011121314//可以使用mapActions，mapMutations，mapGetters 等辅助函数//以mapActions为例import &#123;mapActions&#125; from 'vuex'export default&#123; data()&#123;&#125;, methods&#123; ...mapActions([ 'changeflag', ]) &#125;&#125;//在methods定义以后，便可直接使用this.changeflag来提交action]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>